apiVersion: v1
kind: ConfigMap
metadata:
  name: vllm-serve-script
data:
  vllm_serve.py: |
    import os
    import logging
    from typing import Optional
    from fastapi import FastAPI
    from starlette.requests import Request
    from starlette.responses import StreamingResponse, JSONResponse
    from ray import serve
    from vllm.engine.arg_utils import AsyncEngineArgs
    from vllm.engine.async_llm_engine import AsyncLLMEngine
    from vllm.entrypoints.openai.protocol import (
        ChatCompletionRequest,
        ChatCompletionResponse,
        ErrorResponse,
    )
    from vllm.entrypoints.openai.serving_chat import OpenAIServingChat
    from vllm.entrypoints.openai.serving_models import OpenAIServingModels, BaseModelPath
    from vllm.config import ModelConfig
    from vllm.logger import init_logger

    logger = init_logger(__name__)
    app = FastAPI()

    @serve.deployment(
        name="mistral-deployment",
        ray_actor_options={"num_gpus": 1},
        health_check_period_s=10
    )
    @serve.ingress(app)
    class VLLMDeployment:
        def __init__(
            self,
            model: str,
            tensor_parallel_size: int,
            max_num_seqs: int,
            max_model_len: int,
            response_role: str = "assistant",
            chat_template: Optional[str] = None,
        ):
            logger.info("VLLMDeployment is initializing...")
            self.model_path = model
            self.max_model_len = max_model_len
            
            # Create ModelConfig
            self.model_config = ModelConfig(
                model=model,
                task="generate",
                tokenizer=model,
                tokenizer_mode="auto",
                trust_remote_code=True,
                dtype="bfloat16",
                seed=42,
                max_model_len=max_model_len,
            )

            # Initialize VLLM Engine
            engine_args = AsyncEngineArgs(
                model=model,
                tokenizer_mode="mistral",
                tensor_parallel_size=tensor_parallel_size,
                max_num_seqs=max_num_seqs,
                max_model_len=max_model_len,
                disable_log_requests=True,
                device="cuda",
                dtype="bfloat16",
                trust_remote_code=True,
                gpu_memory_utilization=0.9,
                enable_chunked_prefill=True
            )
            logger.info(f"Engine Args Initialized: {engine_args}")

            try:
                self.engine = AsyncLLMEngine.from_engine_args(engine_args)
                logger.info("VLLM Engine initialized successfully")
            except Exception as e:
                logger.error(f"Error initializing VLLM engine: {str(e)}")
                raise

            self.response_role = response_role
            self.chat_template = chat_template
            self.openai_serving_chat = None
            
            # Initialize OpenAIServingModels with model_config
            self.models = OpenAIServingModels(
                engine_client=None,
                model_config=self.model_config,
                base_model_paths=[BaseModelPath(name=model, model_path=model)]
            )

        async def health_check(self):
            """Health check for Ray Serve deployment"""
            logger.info("Health check passed for VLLMDeployment.")
            return "OK"

        @app.get("/v1/models")
        async def get_models(self):
            """List available models in OpenAI format."""
            return JSONResponse(
                content={
                    "object": "list",
                    "data": [
                        {
                            "id": self.model_path,
                            "object": "model",
                            "owned_by": "organization",
                            "permission": [],
                        }
                    ],
                }
            )

        @app.post("/v1/chat/completions")
        async def create_chat_completion(
            self, request: ChatCompletionRequest, raw_request: Request
        ):
            """Handle chat requests with OpenAI-compatible response format."""
            if not self.openai_serving_chat:
                logger.info("Initializing OpenAIServingChat instance...")
                
                self.openai_serving_chat = OpenAIServingChat(
                    engine_client=self.engine,
                    model_config=self.model_config,
                    models=self.models,
                    response_role=self.response_role,
                    request_logger=None,
                    chat_template=self.chat_template,
                    chat_template_content_format="default",
                    return_tokens_as_token_ids=False,
                    enable_auto_tools=False,
                    tool_parser=None,
                    enable_prompt_tokens_details=False,
                )
                logger.info("OpenAIServingChat initialized successfully")

            logger.info(f"Received request: {request}")
            generator = await self.openai_serving_chat.create_chat_completion(request, raw_request)

            if isinstance(generator, ErrorResponse):
                return JSONResponse(content=generator.model_dump(), status_code=generator.code)

            if request.stream:
                return StreamingResponse(content=generator, media_type="text/event-stream")
            else:
                assert isinstance(generator, ChatCompletionResponse)
                return JSONResponse(content=generator.model_dump())

    deployment = VLLMDeployment.bind(
        model=os.environ.get('MODEL_ID', '/models/mistral-7b-v0-3'),
        tensor_parallel_size=int(os.environ.get('TENSOR_PARALLEL_SIZE', '1')),
        max_num_seqs=int(os.environ.get('MAX_NUM_SEQS', '32')),
        max_model_len=int(os.environ.get('MAX_MODEL_LEN', '8192')),
    )


---
apiVersion: ray.io/v1
kind: RayService
metadata:
  name: vllm
  namespace: default
spec:
  serviceUnhealthySecondThreshold: 1800
  deploymentUnhealthySecondThreshold: 1800
  serveConfigV2: |
    applications:
      - name: mistral
        import_path: "vllm_serve:deployment"
        route_prefix: "/"
        runtime_env:
          env_vars:
            LD_LIBRARY_PATH: "/home/ray/anaconda3/lib:$LD_LIBRARY_PATH"
            MODEL_ID: "/models/mistral-7b-v0-3"
            GPU_MEMORY_UTILIZATION: "0.9"
            MAX_MODEL_LEN: "8192"
            MAX_NUM_SEQS: "4"
            MAX_NUM_BATCHED_TOKENS: "32768"
            TENSOR_PARALLEL_SIZE: "1"
        deployments:
          - name: mistral-deployment
            autoscaling_config:
              metrics_interval_s: 0.2
              min_replicas: 1
              max_replicas: 4
              look_back_period_s: 2
              downscale_delay_s: 600
              upscale_delay_s: 30
              target_num_ongoing_requests_per_replica: 20
            graceful_shutdown_timeout_s: 5
            max_concurrent_queries: 100
            ray_actor_options:
              num_cpus: 1
              num_gpus: 1
  rayClusterConfig:
    rayVersion: '2.43.0'
    enableInTreeAutoscaling: true
    headGroupSpec:
      # serviceType: LoadBalancer
      headService:
        metadata:
          name: vllm
          namespace: default
      rayStartParams:
        dashboard-host: '0.0.0.0'
        num-cpus: "0"
      template:
        spec:
          containers:
          - name: ray-head
            image: public.ecr.aws/j5k9c6o6/eks-genai-workshop:latest
            imagePullPolicy: IfNotPresent
            lifecycle:
              preStop:
                exec:
                  command: ["/bin/sh", "-c", "ray stop"]
            ports:
            - containerPort: 6379
              name: gcs
            - containerPort: 8265
              name: dashboard
            - containerPort: 10001
              name: client
            - containerPort: 8000
              name: serve
            - containerPort: 52365
              name: dashboard-agent
            volumeMounts:
            - mountPath: /tmp/ray
              name: ray-logs
            - name: vllm-script
              mountPath: /home/ray/python/vllm_serve.py
              subPath: vllm_serve.py
            - name: persistent-storage
              mountPath: /models
            resources:
              limits:
                cpu: 2
                memory: "12G"
              requests:
                cpu: 2
                memory: "12G"
            env:
            - name: PYTHONPATH
              value: "/home/ray/python"
            - name: VLLM_PORT
              value: "8004"
            - name: LD_LIBRARY_PATH
              value: "/home/ray/anaconda3/lib:$LD_LIBRARY_PATH"
          nodeSelector:
            node.kubernetes.io/instance-type: m5.xlarge
          volumes:
          - name: ray-logs
            emptyDir: {}
          - name: vllm-script
            configMap:
              name: vllm-serve-script
          - name: persistent-storage
            persistentVolumeClaim:
              claimName: fsx-models
    workerGroupSpecs:
    - replicas: 1
      minReplicas: 1
      maxReplicas: 1
      groupName: gpu-group
      rayStartParams: {}
      template:
        spec:
          containers:
          - name: ray-worker
            image: public.ecr.aws/j5k9c6o6/eks-genai-workshop:latest
            imagePullPolicy: IfNotPresent
            lifecycle:
              preStop:
                exec:
                  command: ["/bin/sh", "-c", "ray stop"]
            volumeMounts:
            - mountPath: /tmp/ray
              name: ray-logs
            - name: vllm-script
              mountPath: /home/ray/python/vllm_serve.py
              subPath: vllm_serve.py
            - name: persistent-storage
              mountPath: /models
            resources:
              limits:
                cpu: 6
                memory: "28Gi"
                nvidia.com/gpu: 1
              requests:
                cpu: 6
                memory: "28Gi"
                nvidia.com/gpu: 1
            env:
            - name: PYTHONPATH
              value: "/home/ray/python"
            - name: VLLM_PORT
              value: "8004"
            - name: LD_LIBRARY_PATH
              value: "/home/ray/anaconda3/lib:$LD_LIBRARY_PATH"
          nodeSelector:
            node.kubernetes.io/instance-type: g6e.2xlarge
            nvidia.com/gpu.present: "true"
          tolerations:
          - key: "nvidia.com/gpu"
            operator: "Exists"
            effect: "NoSchedule"
          volumes:
          - name: ray-logs
            emptyDir: {}
          - name: vllm-script
            configMap:
              name: vllm-serve-script
          - name: persistent-storage
            persistentVolumeClaim:
              claimName: fsx-models
